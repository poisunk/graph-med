// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.2

package genModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	chatDialogueFieldNames          = builder.RawFieldNames(&ChatDialogue{})
	chatDialogueRows                = strings.Join(chatDialogueFieldNames, ",")
	chatDialogueRowsExpectAutoSet   = strings.Join(stringx.Remove(chatDialogueFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	chatDialogueRowsWithPlaceHolder = strings.Join(stringx.Remove(chatDialogueFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGraphMedChatChatDialogueIdPrefix = "cache:graphMedChat:chatDialogue:id:"
)

type (
	chatDialogueModel interface {
		Insert(ctx context.Context, data *ChatDialogue) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ChatDialogue, error)
		Update(ctx context.Context, data *ChatDialogue) error
		Delete(ctx context.Context, id int64) error
	}

	defaultChatDialogueModel struct {
		sqlc.CachedConn
		table string
	}

	ChatDialogue struct {
		Id               int64          `db:"id"`                 // ID
		DialogueId       int64          `db:"dialogue_id"`        // 消息ID
		ParentDialogueId sql.NullInt64  `db:"parent_dialogue_id"` // 父ID
		ChatSessionId    string         `db:"chat_session_id"`    // 会话ID
		UserId           string         `db:"user_id"`            // 用户ID
		ModelName        sql.NullString `db:"model_name"`         // 模型名称
		Role             string         `db:"role"`               // 角色
		Content          sql.NullString `db:"content"`            // 内容
		Operator         sql.NullString `db:"operator"`           // 操作人
		CreatedAt        time.Time      `db:"created_at"`
		UpdatedAt        time.Time      `db:"updated_at"`
		DeletedAt        sql.NullTime   `db:"deleted_at"`
	}
)

func newChatDialogueModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultChatDialogueModel {
	return &defaultChatDialogueModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`chat_dialogue`",
	}
}

func (m *defaultChatDialogueModel) Delete(ctx context.Context, id int64) error {
	graphMedChatChatDialogueIdKey := fmt.Sprintf("%s%v", cacheGraphMedChatChatDialogueIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, graphMedChatChatDialogueIdKey)
	return err
}

func (m *defaultChatDialogueModel) FindOne(ctx context.Context, id int64) (*ChatDialogue, error) {
	graphMedChatChatDialogueIdKey := fmt.Sprintf("%s%v", cacheGraphMedChatChatDialogueIdPrefix, id)
	var resp ChatDialogue
	err := m.QueryRowCtx(ctx, &resp, graphMedChatChatDialogueIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", chatDialogueRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChatDialogueModel) Insert(ctx context.Context, data *ChatDialogue) (sql.Result, error) {
	graphMedChatChatDialogueIdKey := fmt.Sprintf("%s%v", cacheGraphMedChatChatDialogueIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, chatDialogueRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DialogueId, data.ParentDialogueId, data.ChatSessionId, data.UserId, data.ModelName, data.Role, data.Content, data.Operator, data.DeletedAt)
	}, graphMedChatChatDialogueIdKey)
	return ret, err
}

func (m *defaultChatDialogueModel) Update(ctx context.Context, data *ChatDialogue) error {
	graphMedChatChatDialogueIdKey := fmt.Sprintf("%s%v", cacheGraphMedChatChatDialogueIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, chatDialogueRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.DialogueId, data.ParentDialogueId, data.ChatSessionId, data.UserId, data.ModelName, data.Role, data.Content, data.Operator, data.DeletedAt, data.Id)
	}, graphMedChatChatDialogueIdKey)
	return err
}

func (m *defaultChatDialogueModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGraphMedChatChatDialogueIdPrefix, primary)
}

func (m *defaultChatDialogueModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", chatDialogueRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultChatDialogueModel) tableName() string {
	return m.table
}
