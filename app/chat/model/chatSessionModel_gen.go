// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.2

package genModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	chatSessionFieldNames          = builder.RawFieldNames(&ChatSession{})
	chatSessionRows                = strings.Join(chatSessionFieldNames, ",")
	chatSessionRowsExpectAutoSet   = strings.Join(stringx.Remove(chatSessionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	chatSessionRowsWithPlaceHolder = strings.Join(stringx.Remove(chatSessionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGraphMedChatChatSessionIdPrefix        = "cache:graphMedChat:chatSession:id:"
	cacheGraphMedChatChatSessionSessionIdPrefix = "cache:graphMedChat:chatSession:sessionId:"
)

type (
	chatSessionModel interface {
		Insert(ctx context.Context, data *ChatSession) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ChatSession, error)
		FindOneBySessionId(ctx context.Context, sessionId string) (*ChatSession, error)
		Update(ctx context.Context, data *ChatSession) error
		Delete(ctx context.Context, id int64) error
	}

	defaultChatSessionModel struct {
		sqlc.CachedConn
		table string
	}

	ChatSession struct {
		Id        int64          `db:"id"`         // ID
		SessionId string         `db:"session_id"` // 会话ID
		TypeId    string         `db:"type_id"`    // 类型ID
		UserId    string         `db:"user_id"`    // 用户ID
		Title     sql.NullString `db:"title"`      // 标题
		CreatedAt time.Time      `db:"created_at"`
		UpdatedAt time.Time      `db:"updated_at"`
		DeletedAt sql.NullTime   `db:"deleted_at"`
	}
)

func newChatSessionModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultChatSessionModel {
	return &defaultChatSessionModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`chat_session`",
	}
}

func (m *defaultChatSessionModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	graphMedChatChatSessionIdKey := fmt.Sprintf("%s%v", cacheGraphMedChatChatSessionIdPrefix, id)
	graphMedChatChatSessionSessionIdKey := fmt.Sprintf("%s%v", cacheGraphMedChatChatSessionSessionIdPrefix, data.SessionId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, graphMedChatChatSessionIdKey, graphMedChatChatSessionSessionIdKey)
	return err
}

func (m *defaultChatSessionModel) FindOne(ctx context.Context, id int64) (*ChatSession, error) {
	graphMedChatChatSessionIdKey := fmt.Sprintf("%s%v", cacheGraphMedChatChatSessionIdPrefix, id)
	var resp ChatSession
	err := m.QueryRowCtx(ctx, &resp, graphMedChatChatSessionIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", chatSessionRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChatSessionModel) FindOneBySessionId(ctx context.Context, sessionId string) (*ChatSession, error) {
	graphMedChatChatSessionSessionIdKey := fmt.Sprintf("%s%v", cacheGraphMedChatChatSessionSessionIdPrefix, sessionId)
	var resp ChatSession
	err := m.QueryRowIndexCtx(ctx, &resp, graphMedChatChatSessionSessionIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `session_id` = ? limit 1", chatSessionRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, sessionId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChatSessionModel) Insert(ctx context.Context, data *ChatSession) (sql.Result, error) {
	graphMedChatChatSessionIdKey := fmt.Sprintf("%s%v", cacheGraphMedChatChatSessionIdPrefix, data.Id)
	graphMedChatChatSessionSessionIdKey := fmt.Sprintf("%s%v", cacheGraphMedChatChatSessionSessionIdPrefix, data.SessionId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, chatSessionRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.SessionId, data.TypeId, data.UserId, data.Title, data.DeletedAt)
	}, graphMedChatChatSessionIdKey, graphMedChatChatSessionSessionIdKey)
	return ret, err
}

func (m *defaultChatSessionModel) Update(ctx context.Context, newData *ChatSession) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	graphMedChatChatSessionIdKey := fmt.Sprintf("%s%v", cacheGraphMedChatChatSessionIdPrefix, data.Id)
	graphMedChatChatSessionSessionIdKey := fmt.Sprintf("%s%v", cacheGraphMedChatChatSessionSessionIdPrefix, data.SessionId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, chatSessionRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.SessionId, newData.TypeId, newData.UserId, newData.Title, newData.DeletedAt, newData.Id)
	}, graphMedChatChatSessionIdKey, graphMedChatChatSessionSessionIdKey)
	return err
}

func (m *defaultChatSessionModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGraphMedChatChatSessionIdPrefix, primary)
}

func (m *defaultChatSessionModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", chatSessionRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultChatSessionModel) tableName() string {
	return m.table
}
