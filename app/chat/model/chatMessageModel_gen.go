// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.2

package genModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	chatMessageFieldNames          = builder.RawFieldNames(&ChatMessage{})
	chatMessageRows                = strings.Join(chatMessageFieldNames, ",")
	chatMessageRowsExpectAutoSet   = strings.Join(stringx.Remove(chatMessageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	chatMessageRowsWithPlaceHolder = strings.Join(stringx.Remove(chatMessageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGraphMedChatChatMessageIdPrefix = "cache:graphMedChat:chatMessage:id:"
)

type (
	chatMessageModel interface {
		Insert(ctx context.Context, data *ChatMessage) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ChatMessage, error)
		Update(ctx context.Context, data *ChatMessage) error
		Delete(ctx context.Context, id int64) error
	}

	defaultChatMessageModel struct {
		sqlc.CachedConn
		table string
	}

	ChatMessage struct {
		Id             int64          `db:"id"`              // ID
		DialogueId     int64          `db:"dialogue_id"`     // 消息ID
		MessageType    string         `db:"message_type"`    // 消息类型
		Content        sql.NullString `db:"content"`         // 内容
		FunctionName   sql.NullString `db:"function_name"`   // 函数名称
		FunctionArgs   sql.NullString `db:"function_args"`   // 函数参数
		FunctionResult sql.NullString `db:"function_result"` // 函数结果
		Other          sql.NullString `db:"other"`           // 其他信息
		CreatedAt      time.Time      `db:"created_at"`
		UpdatedAt      time.Time      `db:"updated_at"`
		DeletedAt      sql.NullTime   `db:"deleted_at"`
	}
)

func newChatMessageModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultChatMessageModel {
	return &defaultChatMessageModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`chat_message`",
	}
}

func (m *defaultChatMessageModel) Delete(ctx context.Context, id int64) error {
	graphMedChatChatMessageIdKey := fmt.Sprintf("%s%v", cacheGraphMedChatChatMessageIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, graphMedChatChatMessageIdKey)
	return err
}

func (m *defaultChatMessageModel) FindOne(ctx context.Context, id int64) (*ChatMessage, error) {
	graphMedChatChatMessageIdKey := fmt.Sprintf("%s%v", cacheGraphMedChatChatMessageIdPrefix, id)
	var resp ChatMessage
	err := m.QueryRowCtx(ctx, &resp, graphMedChatChatMessageIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", chatMessageRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChatMessageModel) Insert(ctx context.Context, data *ChatMessage) (sql.Result, error) {
	graphMedChatChatMessageIdKey := fmt.Sprintf("%s%v", cacheGraphMedChatChatMessageIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, chatMessageRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DialogueId, data.MessageType, data.Content, data.FunctionName, data.FunctionArgs, data.FunctionResult, data.Other, data.DeletedAt)
	}, graphMedChatChatMessageIdKey)
	return ret, err
}

func (m *defaultChatMessageModel) Update(ctx context.Context, data *ChatMessage) error {
	graphMedChatChatMessageIdKey := fmt.Sprintf("%s%v", cacheGraphMedChatChatMessageIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, chatMessageRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.DialogueId, data.MessageType, data.Content, data.FunctionName, data.FunctionArgs, data.FunctionResult, data.Other, data.DeletedAt, data.Id)
	}, graphMedChatChatMessageIdKey)
	return err
}

func (m *defaultChatMessageModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGraphMedChatChatMessageIdPrefix, primary)
}

func (m *defaultChatMessageModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", chatMessageRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultChatMessageModel) tableName() string {
	return m.table
}
