// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.2

package genModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	chatTypeFieldNames          = builder.RawFieldNames(&ChatType{})
	chatTypeRows                = strings.Join(chatTypeFieldNames, ",")
	chatTypeRowsExpectAutoSet   = strings.Join(stringx.Remove(chatTypeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	chatTypeRowsWithPlaceHolder = strings.Join(stringx.Remove(chatTypeFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGraphMedChatChatTypeIdPrefix = "cache:graphMedChat:chatType:id:"
)

type (
	chatTypeModel interface {
		Insert(ctx context.Context, data *ChatType) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ChatType, error)
		Update(ctx context.Context, data *ChatType) error
		Delete(ctx context.Context, id int64) error
	}

	defaultChatTypeModel struct {
		sqlc.CachedConn
		table string
	}

	ChatType struct {
		Id        int64          `db:"id"`         // ID
		TypeId    string         `db:"type_id"`    // 类型ID
		TypeName  string         `db:"type_name"`  // 类型名称
		McpIds    sql.NullString `db:"mcp_ids"`    // MCP IDs (逗号,分隔)
		ModelName sql.NullString `db:"model_name"` // 模型名称
		CreatedAt time.Time      `db:"created_at"`
		UpdatedAt time.Time      `db:"updated_at"`
		DeletedAt sql.NullTime   `db:"deleted_at"`
	}
)

func newChatTypeModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultChatTypeModel {
	return &defaultChatTypeModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`chat_type`",
	}
}

func (m *defaultChatTypeModel) Delete(ctx context.Context, id int64) error {
	graphMedChatChatTypeIdKey := fmt.Sprintf("%s%v", cacheGraphMedChatChatTypeIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, graphMedChatChatTypeIdKey)
	return err
}

func (m *defaultChatTypeModel) FindOne(ctx context.Context, id int64) (*ChatType, error) {
	graphMedChatChatTypeIdKey := fmt.Sprintf("%s%v", cacheGraphMedChatChatTypeIdPrefix, id)
	var resp ChatType
	err := m.QueryRowCtx(ctx, &resp, graphMedChatChatTypeIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", chatTypeRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChatTypeModel) Insert(ctx context.Context, data *ChatType) (sql.Result, error) {
	graphMedChatChatTypeIdKey := fmt.Sprintf("%s%v", cacheGraphMedChatChatTypeIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, chatTypeRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.TypeId, data.TypeName, data.McpIds, data.ModelName, data.DeletedAt)
	}, graphMedChatChatTypeIdKey)
	return ret, err
}

func (m *defaultChatTypeModel) Update(ctx context.Context, data *ChatType) error {
	graphMedChatChatTypeIdKey := fmt.Sprintf("%s%v", cacheGraphMedChatChatTypeIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, chatTypeRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.TypeId, data.TypeName, data.McpIds, data.ModelName, data.DeletedAt, data.Id)
	}, graphMedChatChatTypeIdKey)
	return err
}

func (m *defaultChatTypeModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGraphMedChatChatTypeIdPrefix, primary)
}

func (m *defaultChatTypeModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", chatTypeRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultChatTypeModel) tableName() string {
	return m.table
}
