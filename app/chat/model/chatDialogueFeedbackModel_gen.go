// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.2

package genModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	chatDialogueFeedbackFieldNames          = builder.RawFieldNames(&ChatDialogueFeedback{})
	chatDialogueFeedbackRows                = strings.Join(chatDialogueFeedbackFieldNames, ",")
	chatDialogueFeedbackRowsExpectAutoSet   = strings.Join(stringx.Remove(chatDialogueFeedbackFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	chatDialogueFeedbackRowsWithPlaceHolder = strings.Join(stringx.Remove(chatDialogueFeedbackFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGraphMedChatChatDialogueFeedbackIdPrefix = "cache:graphMedChat:chatDialogueFeedback:id:"
)

type (
	chatDialogueFeedbackModel interface {
		Insert(ctx context.Context, data *ChatDialogueFeedback) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ChatDialogueFeedback, error)
		Update(ctx context.Context, data *ChatDialogueFeedback) error
		Delete(ctx context.Context, id int64) error
	}

	defaultChatDialogueFeedbackModel struct {
		sqlc.CachedConn
		table string
	}

	ChatDialogueFeedback struct {
		Id            int64          `db:"id"`              // ID
		DialogueId    int64          `db:"dialogue_id"`     // 消息ID
		UserId        string         `db:"user_id"`         // 用户ID
		ChatSessionId string         `db:"chat_session_id"` // 会话ID
		Feedback      sql.NullString `db:"feedback"`        // 反馈
		CreatedAt     time.Time      `db:"created_at"`
		UpdatedAt     time.Time      `db:"updated_at"`
		DeletedAt     sql.NullTime   `db:"deleted_at"`
	}
)

func newChatDialogueFeedbackModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultChatDialogueFeedbackModel {
	return &defaultChatDialogueFeedbackModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`chat_dialogue_feedback`",
	}
}

func (m *defaultChatDialogueFeedbackModel) Delete(ctx context.Context, id int64) error {
	graphMedChatChatDialogueFeedbackIdKey := fmt.Sprintf("%s%v", cacheGraphMedChatChatDialogueFeedbackIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, graphMedChatChatDialogueFeedbackIdKey)
	return err
}

func (m *defaultChatDialogueFeedbackModel) FindOne(ctx context.Context, id int64) (*ChatDialogueFeedback, error) {
	graphMedChatChatDialogueFeedbackIdKey := fmt.Sprintf("%s%v", cacheGraphMedChatChatDialogueFeedbackIdPrefix, id)
	var resp ChatDialogueFeedback
	err := m.QueryRowCtx(ctx, &resp, graphMedChatChatDialogueFeedbackIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", chatDialogueFeedbackRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChatDialogueFeedbackModel) Insert(ctx context.Context, data *ChatDialogueFeedback) (sql.Result, error) {
	graphMedChatChatDialogueFeedbackIdKey := fmt.Sprintf("%s%v", cacheGraphMedChatChatDialogueFeedbackIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, chatDialogueFeedbackRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DialogueId, data.UserId, data.ChatSessionId, data.Feedback, data.DeletedAt)
	}, graphMedChatChatDialogueFeedbackIdKey)
	return ret, err
}

func (m *defaultChatDialogueFeedbackModel) Update(ctx context.Context, data *ChatDialogueFeedback) error {
	graphMedChatChatDialogueFeedbackIdKey := fmt.Sprintf("%s%v", cacheGraphMedChatChatDialogueFeedbackIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, chatDialogueFeedbackRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.DialogueId, data.UserId, data.ChatSessionId, data.Feedback, data.DeletedAt, data.Id)
	}, graphMedChatChatDialogueFeedbackIdKey)
	return err
}

func (m *defaultChatDialogueFeedbackModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGraphMedChatChatDialogueFeedbackIdPrefix, primary)
}

func (m *defaultChatDialogueFeedbackModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", chatDialogueFeedbackRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultChatDialogueFeedbackModel) tableName() string {
	return m.table
}
