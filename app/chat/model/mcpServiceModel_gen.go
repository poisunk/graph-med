// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.2

package genModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	mcpServiceFieldNames          = builder.RawFieldNames(&McpService{})
	mcpServiceRows                = strings.Join(mcpServiceFieldNames, ",")
	mcpServiceRowsExpectAutoSet   = strings.Join(stringx.Remove(mcpServiceFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	mcpServiceRowsWithPlaceHolder = strings.Join(stringx.Remove(mcpServiceFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGraphMedChatMcpServiceIdPrefix = "cache:graphMedChat:mcpService:id:"
)

type (
	mcpServiceModel interface {
		Insert(ctx context.Context, data *McpService) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*McpService, error)
		Update(ctx context.Context, data *McpService) error
		Delete(ctx context.Context, id int64) error
	}

	defaultMcpServiceModel struct {
		sqlc.CachedConn
		table string
	}

	McpService struct {
		Id        int64          `db:"id"`       // ID
		McpId     string         `db:"mcp_id"`   // MCP ID
		McpType   string         `db:"mcp_type"` // MCP类型
		Name      string         `db:"name"`     // MCP名称
		Args      sql.NullString `db:"args"`     // 运行参数
		CreatedAt time.Time      `db:"created_at"`
		UpdatedAt time.Time      `db:"updated_at"`
		DeletedAt sql.NullTime   `db:"deleted_at"`
	}
)

func newMcpServiceModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultMcpServiceModel {
	return &defaultMcpServiceModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`mcp_service`",
	}
}

func (m *defaultMcpServiceModel) Delete(ctx context.Context, id int64) error {
	graphMedChatMcpServiceIdKey := fmt.Sprintf("%s%v", cacheGraphMedChatMcpServiceIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, graphMedChatMcpServiceIdKey)
	return err
}

func (m *defaultMcpServiceModel) FindOne(ctx context.Context, id int64) (*McpService, error) {
	graphMedChatMcpServiceIdKey := fmt.Sprintf("%s%v", cacheGraphMedChatMcpServiceIdPrefix, id)
	var resp McpService
	err := m.QueryRowCtx(ctx, &resp, graphMedChatMcpServiceIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", mcpServiceRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMcpServiceModel) Insert(ctx context.Context, data *McpService) (sql.Result, error) {
	graphMedChatMcpServiceIdKey := fmt.Sprintf("%s%v", cacheGraphMedChatMcpServiceIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, mcpServiceRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.McpId, data.McpType, data.Name, data.Args, data.DeletedAt)
	}, graphMedChatMcpServiceIdKey)
	return ret, err
}

func (m *defaultMcpServiceModel) Update(ctx context.Context, data *McpService) error {
	graphMedChatMcpServiceIdKey := fmt.Sprintf("%s%v", cacheGraphMedChatMcpServiceIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, mcpServiceRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.McpId, data.McpType, data.Name, data.Args, data.DeletedAt, data.Id)
	}, graphMedChatMcpServiceIdKey)
	return err
}

func (m *defaultMcpServiceModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGraphMedChatMcpServiceIdPrefix, primary)
}

func (m *defaultMcpServiceModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", mcpServiceRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultMcpServiceModel) tableName() string {
	return m.table
}
