// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.2
// Source: chat.proto

package chat

import (
	"context"

	"graph-med/app/chat/rpc/pd"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ChatCompletionReq                  = pd.ChatCompletionReq
	ChatCompletionResp                 = pd.ChatCompletionResp
	ChatCompletionResp_Choice          = pd.ChatCompletionResp_Choice
	ChatCompletionResp_Choice_Delta    = pd.ChatCompletionResp_Choice_Delta
	ChatCompletionResp_Choice_ToolCall = pd.ChatCompletionResp_Choice_ToolCall
	CreateChatSessionReq               = pd.CreateChatSessionReq
	CreateChatSessionResp              = pd.CreateChatSessionResp
	FeedbackReq                        = pd.FeedbackReq
	FeedbackResp                       = pd.FeedbackResp

	Chat interface {
		// 创建对话session
		CreateChatSession(ctx context.Context, in *CreateChatSessionReq, opts ...grpc.CallOption) (*CreateChatSessionResp, error)
		// 发起对话
		ChatCompletion(ctx context.Context, in *ChatCompletionReq, opts ...grpc.CallOption) (pd.Chat_ChatCompletionClient, error)
		// 对话反馈
		Feedback(ctx context.Context, in *FeedbackReq, opts ...grpc.CallOption) (*FeedbackResp, error)
		// 重新发起对话
		RegenerateChat(ctx context.Context, in *ChatCompletionReq, opts ...grpc.CallOption) (pd.Chat_RegenerateChatClient, error)
	}

	defaultChat struct {
		cli zrpc.Client
	}
)

func NewChat(cli zrpc.Client) Chat {
	return &defaultChat{
		cli: cli,
	}
}

// 创建对话session
func (m *defaultChat) CreateChatSession(ctx context.Context, in *CreateChatSessionReq, opts ...grpc.CallOption) (*CreateChatSessionResp, error) {
	client := pd.NewChatClient(m.cli.Conn())
	return client.CreateChatSession(ctx, in, opts...)
}

// 发起对话
func (m *defaultChat) ChatCompletion(ctx context.Context, in *ChatCompletionReq, opts ...grpc.CallOption) (pd.Chat_ChatCompletionClient, error) {
	client := pd.NewChatClient(m.cli.Conn())
	return client.ChatCompletion(ctx, in, opts...)
}

// 对话反馈
func (m *defaultChat) Feedback(ctx context.Context, in *FeedbackReq, opts ...grpc.CallOption) (*FeedbackResp, error) {
	client := pd.NewChatClient(m.cli.Conn())
	return client.Feedback(ctx, in, opts...)
}

// 重新发起对话
func (m *defaultChat) RegenerateChat(ctx context.Context, in *ChatCompletionReq, opts ...grpc.CallOption) (pd.Chat_RegenerateChatClient, error) {
	client := pd.NewChatClient(m.cli.Conn())
	return client.RegenerateChat(ctx, in, opts...)
}
