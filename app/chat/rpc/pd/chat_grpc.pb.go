// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: chat.proto

package pd

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Chat_CreateChatSession_FullMethodName = "/pd.Chat/CreateChatSession"
	Chat_ChatCompletion_FullMethodName    = "/pd.Chat/ChatCompletion"
	Chat_Feedback_FullMethodName          = "/pd.Chat/Feedback"
	Chat_RegenerateChat_FullMethodName    = "/pd.Chat/RegenerateChat"
)

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatClient interface {
	// 创建对话session
	CreateChatSession(ctx context.Context, in *CreateChatSessionReq, opts ...grpc.CallOption) (*CreateChatSessionResp, error)
	// 发起对话
	ChatCompletion(ctx context.Context, in *ChatCompletionReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatCompletionResp], error)
	// 对话反馈
	Feedback(ctx context.Context, in *FeedbackReq, opts ...grpc.CallOption) (*FeedbackResp, error)
	// 重新发起对话
	RegenerateChat(ctx context.Context, in *ChatCompletionReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatCompletionResp], error)
}

type chatClient struct {
	cc grpc.ClientConnInterface
}

func NewChatClient(cc grpc.ClientConnInterface) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) CreateChatSession(ctx context.Context, in *CreateChatSessionReq, opts ...grpc.CallOption) (*CreateChatSessionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateChatSessionResp)
	err := c.cc.Invoke(ctx, Chat_CreateChatSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) ChatCompletion(ctx context.Context, in *ChatCompletionReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatCompletionResp], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Chat_ServiceDesc.Streams[0], Chat_ChatCompletion_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatCompletionReq, ChatCompletionResp]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Chat_ChatCompletionClient = grpc.ServerStreamingClient[ChatCompletionResp]

func (c *chatClient) Feedback(ctx context.Context, in *FeedbackReq, opts ...grpc.CallOption) (*FeedbackResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeedbackResp)
	err := c.cc.Invoke(ctx, Chat_Feedback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) RegenerateChat(ctx context.Context, in *ChatCompletionReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatCompletionResp], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Chat_ServiceDesc.Streams[1], Chat_RegenerateChat_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatCompletionReq, ChatCompletionResp]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Chat_RegenerateChatClient = grpc.ServerStreamingClient[ChatCompletionResp]

// ChatServer is the server API for Chat service.
// All implementations must embed UnimplementedChatServer
// for forward compatibility.
type ChatServer interface {
	// 创建对话session
	CreateChatSession(context.Context, *CreateChatSessionReq) (*CreateChatSessionResp, error)
	// 发起对话
	ChatCompletion(*ChatCompletionReq, grpc.ServerStreamingServer[ChatCompletionResp]) error
	// 对话反馈
	Feedback(context.Context, *FeedbackReq) (*FeedbackResp, error)
	// 重新发起对话
	RegenerateChat(*ChatCompletionReq, grpc.ServerStreamingServer[ChatCompletionResp]) error
	mustEmbedUnimplementedChatServer()
}

// UnimplementedChatServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChatServer struct{}

func (UnimplementedChatServer) CreateChatSession(context.Context, *CreateChatSessionReq) (*CreateChatSessionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChatSession not implemented")
}
func (UnimplementedChatServer) ChatCompletion(*ChatCompletionReq, grpc.ServerStreamingServer[ChatCompletionResp]) error {
	return status.Errorf(codes.Unimplemented, "method ChatCompletion not implemented")
}
func (UnimplementedChatServer) Feedback(context.Context, *FeedbackReq) (*FeedbackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Feedback not implemented")
}
func (UnimplementedChatServer) RegenerateChat(*ChatCompletionReq, grpc.ServerStreamingServer[ChatCompletionResp]) error {
	return status.Errorf(codes.Unimplemented, "method RegenerateChat not implemented")
}
func (UnimplementedChatServer) mustEmbedUnimplementedChatServer() {}
func (UnimplementedChatServer) testEmbeddedByValue()              {}

// UnsafeChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServer will
// result in compilation errors.
type UnsafeChatServer interface {
	mustEmbedUnimplementedChatServer()
}

func RegisterChatServer(s grpc.ServiceRegistrar, srv ChatServer) {
	// If the following call pancis, it indicates UnimplementedChatServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Chat_ServiceDesc, srv)
}

func _Chat_CreateChatSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).CreateChatSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_CreateChatSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).CreateChatSession(ctx, req.(*CreateChatSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_ChatCompletion_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatCompletionReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServer).ChatCompletion(m, &grpc.GenericServerStream[ChatCompletionReq, ChatCompletionResp]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Chat_ChatCompletionServer = grpc.ServerStreamingServer[ChatCompletionResp]

func _Chat_Feedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedbackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).Feedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_Feedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).Feedback(ctx, req.(*FeedbackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_RegenerateChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatCompletionReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServer).RegenerateChat(m, &grpc.GenericServerStream[ChatCompletionReq, ChatCompletionResp]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Chat_RegenerateChatServer = grpc.ServerStreamingServer[ChatCompletionResp]

// Chat_ServiceDesc is the grpc.ServiceDesc for Chat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pd.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChatSession",
			Handler:    _Chat_CreateChatSession_Handler,
		},
		{
			MethodName: "Feedback",
			Handler:    _Chat_Feedback_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChatCompletion",
			Handler:       _Chat_ChatCompletion_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RegenerateChat",
			Handler:       _Chat_RegenerateChat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chat.proto",
}
