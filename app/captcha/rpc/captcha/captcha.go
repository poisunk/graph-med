// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.2
// Source: captcha.proto

package captcha

import (
	"context"

	"graph-med/app/captcha/rpc/pd"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DigitCaptchaReq   = pd.DigitCaptchaReq
	DigitCaptchaResp  = pd.DigitCaptchaResp
	EmailCaptchaReq   = pd.EmailCaptchaReq
	EmailCaptchaResp  = pd.EmailCaptchaResp
	RotateCaptchaReq  = pd.RotateCaptchaReq
	RotateCaptchaResp = pd.RotateCaptchaResp
	SendEmailCodeReq  = pd.SendEmailCodeReq
	SendEmailCodeResp = pd.SendEmailCodeResp
	VerifyCaptchaReq  = pd.VerifyCaptchaReq
	VerifyCaptchaResp = pd.VerifyCaptchaResp

	Captcha interface {
		RotateCaptcha(ctx context.Context, in *RotateCaptchaReq, opts ...grpc.CallOption) (*RotateCaptchaResp, error)
		DigitCaptcha(ctx context.Context, in *DigitCaptchaReq, opts ...grpc.CallOption) (*DigitCaptchaResp, error)
		EmailCaptcha(ctx context.Context, in *EmailCaptchaReq, opts ...grpc.CallOption) (*EmailCaptchaResp, error)
		SendEmailCode(ctx context.Context, in *SendEmailCodeReq, opts ...grpc.CallOption) (*SendEmailCodeResp, error)
		VerifyCaptcha(ctx context.Context, in *VerifyCaptchaReq, opts ...grpc.CallOption) (*VerifyCaptchaResp, error)
	}

	defaultCaptcha struct {
		cli zrpc.Client
	}
)

func NewCaptcha(cli zrpc.Client) Captcha {
	return &defaultCaptcha{
		cli: cli,
	}
}

func (m *defaultCaptcha) RotateCaptcha(ctx context.Context, in *RotateCaptchaReq, opts ...grpc.CallOption) (*RotateCaptchaResp, error) {
	client := pd.NewCaptchaClient(m.cli.Conn())
	return client.RotateCaptcha(ctx, in, opts...)
}

func (m *defaultCaptcha) DigitCaptcha(ctx context.Context, in *DigitCaptchaReq, opts ...grpc.CallOption) (*DigitCaptchaResp, error) {
	client := pd.NewCaptchaClient(m.cli.Conn())
	return client.DigitCaptcha(ctx, in, opts...)
}

func (m *defaultCaptcha) EmailCaptcha(ctx context.Context, in *EmailCaptchaReq, opts ...grpc.CallOption) (*EmailCaptchaResp, error) {
	client := pd.NewCaptchaClient(m.cli.Conn())
	return client.EmailCaptcha(ctx, in, opts...)
}

func (m *defaultCaptcha) SendEmailCode(ctx context.Context, in *SendEmailCodeReq, opts ...grpc.CallOption) (*SendEmailCodeResp, error) {
	client := pd.NewCaptchaClient(m.cli.Conn())
	return client.SendEmailCode(ctx, in, opts...)
}

func (m *defaultCaptcha) VerifyCaptcha(ctx context.Context, in *VerifyCaptchaReq, opts ...grpc.CallOption) (*VerifyCaptchaResp, error) {
	client := pd.NewCaptchaClient(m.cli.Conn())
	return client.VerifyCaptcha(ctx, in, opts...)
}
